// GENERATED BY goruda
// This file was generated automatically at
// {{ .TimeStamp }}

package {{.PackageName}}_test

{{ $packageName := .PackageName  }}
import (
	"testing"

	{{ .PackageName }} "github.com/golangid/goruda/generated"
	"github.com/stretchr/testify/require"
)

{{ $implementationName := print .Name "Implementation" }}
{{- range $key, $element := .Methods }}
func Test{{ $implementationName }}_{{ $key | camelcase }}(t *testing.T) {
	type output struct {
	{{- range $index, $val := $element.ReturnValue }}{{ if $val.IsCustomType }}
		result{{ $index }} {{ $packageName }}.{{$val.Type}}
		{{ else }}
		result{{ $index }} {{$val.Type}}
		{{ end }}
	{{- end }}
		err     error
	}

	type input struct {
	{{- range $index, $val := $element.Attributes }}{{ if $val.IsCustomType }}
		input{{ $index }} {{ $packageName }}.{{$val.Type}}
		{{ else }}
		input{{ $index }} {{$val.Type}}
		{{ end }}
	{{- end }}
	}
	tests := []struct {
		name   string
		input  input
		output output
	}{}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			service := {{ $packageName }}.{{ $implementationName }}{}
			{{ range $index, $val := $element.ReturnValue }}res{{$index}},{{ end }} err := service.{{ $key | camelcase }}({{ range $index, $val := $element.Attributes }}test.input.input{{ $index }}{{ if ne $index $element.Attributes.GetLastIndex }},{{ end }}{{ end }})
			require.Equal(t, test.output.err, err)
			{{- range $index, $val := $element.ReturnValue }}
			require.Equal(t, test.output.result{{ $index }}, res{{ $index }})
			{{- end }}
		})
	}
}
{{- end }}
